# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    oauth.discord.id: '%env(OAUTH_DISCORD_ID)%'
    oauth.discord.secret: '%env(OAUTH_DISCORD_SECRET)%'
    oauth.discord.url: '%env(OAUTH_DISCORD_URL)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    League\OAuth2\Client\Provider\GenericProvider:
        class: League\OAuth2\Client\Provider\GenericProvider
        arguments:
            - {
                clientId: '%env(OAUTH_DISCORD_ID)%',
                clientSecret: '%env(OAUTH_DISCORD_SECRET)%',
                urlAuthorize: 'https://discord.com/oauth2/authorize',
                urlAccessToken: 'https://discord.com/api/oauth2/token',
                urlResourceOwnerDetails: 'https://discord.com/api/oauth2/@me'
            }

    App\Doctrine\CurrentUserExtension:
        tags:
            - { name: api_platform.doctrine.orm.query_extension.collection }
            - { name: api_platform.doctrine.orm.query_extension.item }

    App\OpenApi\TokenDecorator:
        decorates: 'api_platform.openapi.factory'
        arguments: ['@.inner']

    App\EventListener\LogRequestAndResponseEventListener:
        tags:
            - { 'name': 'monolog.logger', 'channel': 'request_log' }
            - { 'name': 'kernel.event_listener', 'event': 'kernel.terminate', 'method': 'onKernelTerminate' }
